{
  "paragraphs": [
    {
      "text": "def toJSON(ranks: org.apache.spark.graphx.VertexRDD[Double], pages: Int): String \u003d {\r\n  val json \u003d ranks.collect().take(pages).mkString(\"\\n\").replaceAll(\"\\\\(\",\"\\\\{\\\"name\\\":\\\"\").replaceAll(\",\",\"\\\", \\\"size\\\":\").replaceAll(\"\\\\)\",\"\\\\},\")\r\n  val subJSON \u003d json.substring(0, json.size-1)\r\n    val data2 \u003d \"\"\"{\r\n \"name\": \"flare\",\r\n \"children\": [\r\n  {\r\n   \"name\": \"analytics\",\r\n   \"children\": [\r\n    {\r\n     \"name\": \"cluster\",\r\n     \"children\": [ \"\"\" + subJSON + \"\"\"]\r\n  }\r\n ]\r\n}\r\n]\r\n}\"\"\"\r\n  return data2\r\n}\r\n\r\nimport org.apache.spark.graphx.GraphLoader\r\n\r\nval graph \u003d GraphLoader.edgeListFile(sc, \"file:///usr/zeppelin/data/AmazonCut.txt\")\r\n// TODO: Run PageRank and return vertices\r\nval ranks \u003d ...\r\n//second parameter sets # of vertices to visualize (suggested \u003c 500)\r\nval jsonRanks \u003d toJSON(ranks, 200)\r\n\r\n/////VISUALIZATION/////\r\nprint(s\"\"\"%html \r\n\u003cdiv id\u003d\"inline1\"\u003e\u003c/div\u003e \u003c!-- add div to draw into --\u003e\r\n\u003cscript\u003e\r\n\r\nvar diameter \u003d 700, // changed size\r\n    format \u003d d3.format(\",d\"),\r\n    color \u003d d3.scale.category20c();\r\n\r\nvar bubble \u003d d3.layout.pack()\r\n    .sort(null)\r\n    .size([diameter, diameter])\r\n    .padding(1.5);\r\n\r\nvar svg \u003d d3.select(\"#inline1\").append(\"svg\") //changed where to draw, changed to draw to my div\r\n    .attr(\"width\", diameter)\r\n    .attr(\"height\", diameter)\r\n    .attr(\"class\", \"bubble\");\r\n\r\nvar plot \u003d function(root) {\r\n\r\n  var node \u003d svg.selectAll(\".node\")\r\n      .data(bubble.nodes(classes(root))\r\n      .filter(function(d) { return !d.children; }))\r\n    .enter().append(\"g\")\r\n      .attr(\"class\", \"node\")\r\n      .attr(\"transform\", function(d) { return \"translate(\" + d.x + \",\" + d.y + \")\"; });\r\n\r\n  node.append(\"title\")\r\n      .text(function(d) { return d.className + \": \" + format(d.value); });\r\n\r\n  node.append(\"circle\")\r\n      .attr(\"r\", function(d) { return d.r; })\r\n      .style(\"fill\", function(d) { return color(d.packageName); });\r\n\r\n  node.append(\"text\")\r\n      .attr(\"dy\", \".3em\")\r\n      .style(\"text-anchor\", \"middle\")\r\n      .text(function(d) { return d.className.substring(0, d.r / 3); });\r\n}\r\n\r\n// Returns a flattened hierarchy containing all leaf nodes under the root.\r\nfunction classes(root) {\r\n  var classes \u003d [];\r\n\r\n  function recurse(name, node) {\r\n    if (node.children) node.children.forEach(function(child) { recurse(node.name, child); });\r\n    else classes.push({packageName: name, className: node.name, value: node.size});\r\n  }\r\n\r\n  recurse(null, root);\r\n  return {children: classes};\r\n}\r\n\r\nplot(${jsonRanks}) // inject json from scala\r\n\r\nd3.select(self.frameElement).style(\"height\", diameter + \"px\");\r\n\r\n\u003c/script\u003e\r\n\r\n\"\"\")\r\n     ",
      "dateUpdated": "Nov 27, 2016 4:51:03 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {},
          "map": {
            "baseMapType": "Streets",
            "isOnline": true,
            "pinCols": []
          }
        },
        "enabled": true,
        "editorMode": "ace/mode/text"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1480204200782_-1145380595",
      "id": "20161126-235000_778113673",
      "result": {
        "code": "ERROR",
        "type": "TEXT",
        "msg": "\ntoJSON: (ranks: org.apache.spark.graphx.VertexRDD[Double], pages: Int)String\n\nimport org.apache.spark.graphx.GraphLoader\n\ngraph: org.apache.spark.graphx.Graph[Int,Int] \u003d org.apache.spark.graphx.impl.GraphImpl@7da0e5ed\n\n\n\n\u003cconsole\u003e:1: error: illegal start of simple expression\nval ranks \u003d ...\n            ^\n"
      },
      "dateCreated": "Nov 26, 2016 11:50:00 PM",
      "dateStarted": "Nov 27, 2016 4:51:03 PM",
      "dateFinished": "Nov 27, 2016 4:51:04 PM",
      "status": "ERROR",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "",
      "dateUpdated": "Nov 26, 2016 11:50:17 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {},
          "map": {
            "baseMapType": "Streets",
            "isOnline": true,
            "pinCols": []
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1480204207099_-745995913",
      "id": "20161126-235007_828166547",
      "dateCreated": "Nov 26, 2016 11:50:07 PM",
      "status": "READY",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "02_PageRank",
  "id": "2C4DN2N3Y",
  "angularObjects": {
    "2C2C3EZB3:shared_process": [],
    "2C3ZGJY97:shared_process": [],
    "2C3SNFNBU:shared_process": [],
    "2C3D6JQ57:shared_process": [],
    "2C3E6UDKP:shared_process": [],
    "2C34GDA5F:shared_process": [],
    "2C2588HFQ:shared_process": [],
    "2C4K6UWHS:shared_process": [],
    "2C4GVEV3N:shared_process": []
  },
  "config": {
    "looknfeel": "default"
  },
  "info": {}
}